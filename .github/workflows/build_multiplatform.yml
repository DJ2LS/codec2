name: Build_Multiplatform
on: [push]

jobs:
  BUILD_ON_AMD64:
    name: Build ${{ matrix.os }} x64_i686
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04, macos-11, macos-12, windows-2019, windows-2022]
        include:
          - os: ubuntu-18.04
            libcodec2_name: libcodec2.so
            libcodec2_os_name: libcodec2_ubuntu-1804_x64_i686.so
            generator: Unix Makefiles
            shell: bash

          - os: ubuntu-20.04
            libcodec2_name: libcodec2.so
            libcodec2_os_name: libcodec2_ubuntu-2004_x64_i686.so
            generator: Unix Makefiles
            shell: bash

          - os: ubuntu-22.04
            libcodec2_name: libcodec2.so
            libcodec2_os_name: libcodec2_ubuntu-2204_x64_i686.so
            generator: Unix Makefiles
            shell: bash

          - os: macos-11
            libcodec2_name: libcodec2.dylib
            libcodec2_os_name: libcodec2_macos-11_x64_i686.dylib
            generator: Unix Makefiles
            shell: bash

          - os: macos-12
            libcodec2_name: libcodec2.dylib
            libcodec2_os_name: libcodec2_macos-12_x64_i686.dylib
            generator: Unix Makefiles
            shell: bash

          - os: windows-2019
            libcodec2_name: libcodec2.dll
            libcodec2_os_name: libcodec2_windows-2019_x64_i686.dll

          - os: windows-2022
            libcodec2_name: libcodec2.dll
            libcodec2_os_name: libcodec2_windows-2022_x64_i686.dll


    steps:
      - name: Build codec2 ${{ matrix.os }} x64_i686
        if: ${{!startsWith(matrix.os, 'windows') }}
        run: |
          git clone https://github.com/drowe67/codec2.git
          cd codec2
          git checkout master
          mkdir build
          cd build
          cmake ../
          make
          mv src/${{ matrix.libcodec2_name }} src/${{ matrix.libcodec2_os_name }}

      - name: Build codec2 ${{ matrix.os }} x64_i686
        if: ${{startsWith(matrix.os, 'windows') }}
        run: |
          git clone https://github.com/drowe67/codec2.git
          cd codec2
          git checkout master
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -D CMAKE_MAKE_PROGRAM=mingw32-make.exe ../
          make
          mv src/${{ matrix.libcodec2_name }} src/${{ matrix.libcodec2_os_name }}

      - uses: actions/upload-artifact@v3
        with:
          name: libcodec2_${{ matrix.os }}
          path: codec2/build/src/${{ matrix.libcodec2_os_name }}

      - name: LIST ALL FILES
        shell: bash
        run: |
          ls -R

  BUILD_ON_MULTIARCH:
    # The host should always be linux
    runs-on: ubuntu-18.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: armv6
            distro: bullseye
          - arch: armv7
            distro: ubuntu18.04

    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: libcodec2_${{ matrix.distro }}_${{ matrix.arch }}.so

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -q -y
                apt-get install -q -y git build-essential cmake
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which build-essential cmake
                ;;
              alpine*)
                apk update
                apk add git build-essential cmake
                ;;
            esac

          # Produce a binary artifact and place it in the mounted volume
          run: |
            
            git clone https://github.com/drowe67/codec2.git
            cd codec2
            git checkout master
            mkdir build
            cd build
            cmake ../
            make
            mv ./src/libcodec2.so.1.0 /artifacts/${artifact_name}

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -R /
          ls -al "${PWD}/artifacts"

      - uses: actions/upload-artifact@v3
        with:
          name: ${artifact_name}
          path: ${PWD}/artifacts/${artifact_name}